# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

pool:
  vmImage: 'windows-2019'

steps:
- task: PowerShell@2
  displayName: Install platyPS
  inputs:
    targetType: 'inline'
    script: 'Install-Module platyPS -Force -Confirm:$false -Scope CurrentUser'
    pwsh: true

- task: PowerShell@2
  displayName: Install PowerShellGet [v2.1.3 has a Publish-Module bug]
  inputs:
    targetType: 'inline'
    script: 'Install-Module PowerShellGet -Force -Confirm:$false -Scope CurrentUser -SkipPublisherCheck'
    pwsh: true

- task: PowerShell@2
  displayName: print installed modules
  inputs:
    targetType: 'inline'
    script: 'Get-InstalledModule'
    pwsh: true

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: 'custom'
    custom: 'msbuild'
    arguments: 'build.proj /t:Build;CopyAboutTopics;GenerateHelp /p:Configuration=Release;GenerateDocumentationFile=false'

- task: PowerShell@2
  displayName: Before Signing
  inputs:
    targetType: 'inline'
    script: |
      # Delete PowerShell Runtime Files
      Get-ChildItem -Path $Env:RepoArtifacts/$Env:Configuration -Recurse -Include 'runtimes' | Remove-Item -Recurse -Force
      
      # Copy ShortCut to be Signed
      Copy-Item .\tools\Az\Az.psm1 -Destination $Env:RepoArtifacts/$Env:Configuration
      Copy-Item .\tools\AzPreview\AzPreview.psm1 -Destination $Env:RepoArtifacts/$Env:Configuration
      Copy-Item .\tools\Installer\InstallModule.ps1 -Destination $Env:RepoArtifacts/$Env:Configuration
      Copy-Item .\setup\InstallerChecks.dll -Destination $Env:RepoArtifacts/
      Copy-Item .\setup\Microsoft.Deployment.WindowsInstaller.dll -Destination $Env:RepoArtifacts/